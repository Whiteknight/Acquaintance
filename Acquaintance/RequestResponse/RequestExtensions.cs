using System;
using System.Threading.Tasks;

namespace Acquaintance.RequestResponse
{
    public static class RequestExtensions
    {
        /// <summary>
        /// Wait for the response and return it if available before the timeout.
        /// Throws any exceptions that are generated by the listener
        /// </summary>
        /// <typeparam name="TResponse"></typeparam>
        /// <param name="request"></param>
        /// <param name="timeout"></param>
        /// <returns></returns>
        public static TResponse GetResponseOrWait<TResponse>(this IRequest<TResponse> request, TimeSpan timeout)
        {
            request.WaitForResponse(timeout);
            request.ThrowExceptionIfError();
            return request.GetResponse();
        }

        /// <summary>
        /// Wait for the response and return it if available before a default
        /// timeout. Throws any exceptions which are generated by the listener
        /// </summary>
        /// <typeparam name="TResponse"></typeparam>
        /// <param name="request"></param>
        /// <returns></returns>
        public static TResponse GetResponseOrWait<TResponse>(this IRequest<TResponse> request)
        {
            return GetResponseOrWait(request, new TimeSpan(0, 0, 10));
        }

        /// <summary>
        /// Wrap the request in a promise-style Task object.
        /// </summary>
        /// <typeparam name="TResponse"></typeparam>
        /// <param name="request"></param>
        /// <returns></returns>
        public static Task<TResponse> GetResponseAsync<TResponse>(this IRequest<TResponse> request)
        {
            return request.GetResponseAsync(new TimeSpan(0, 0, 10));
        }

        /// <summary>
        /// Waits for a response using a promise-style Task object.
        /// </summary>
        /// <typeparam name="TResponse"></typeparam>
        /// <param name="request"></param>
        /// <returns>True if the value is received before the timeout</returns>
        public static Task<bool> WaitForResponseAsync<TResponse>(this IRequest<TResponse> request)
        {
            return WaitForResponseAsync(request, new TimeSpan(0, 0, 10));
        }

        /// <summary>
        /// Waits for a response using a promise-style Task object
        /// </summary>
        /// <typeparam name="TResponse"></typeparam>
        /// <param name="request"></param>
        /// <param name="timeout"></param>
        /// <returns>True if the value is received before the timeout</returns>
        public static async Task<bool> WaitForResponseAsync<TResponse>(this IRequest<TResponse> request, TimeSpan timeout)
        {
            return await Task.Run(() => request.WaitForResponse(timeout)).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the response, if available, before a given timeout. Throws any
        /// Exceptions generated by the listener and also throws an exception
        /// if the response is not received before a timeout.
        /// </summary>
        /// <typeparam name="TResponse"></typeparam>
        /// <param name="request"></param>
        /// <param name="timeout"></param>
        /// <returns>The response</returns>
        public static async Task<TResponse> GetResponseAsync<TResponse>(this IRequest<TResponse> request, TimeSpan timeout)
        {
            return await WaitForResponseAsync(request, timeout)
                .ContinueWith(okTask =>
                {
                    bool ok = okTask.IsCompleted && !okTask.IsFaulted && okTask.Result;
                    if (!ok)
                    {
                        if (okTask.IsFaulted)
                            throw new Exception("Could not get response because of exception", okTask.Exception);
                        throw new Exception("Could not get response in alotted time");
                    }
                    request.ThrowExceptionIfError();
                    return request.GetResponse();
                })
                .ConfigureAwait(false);
        }
    }
}